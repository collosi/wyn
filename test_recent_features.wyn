-- Test shader for recent commits:
-- - Array creation and indexing (MakeArray, ArrayIndex)
-- - Boolean literals (true, false)
-- - Constant folding with division

-- Color palette using array construction (tests MakeArray)
def palette: [4]vec3 =
  [vec3 (255.0f32/255.0f32) (100.0f32/255.0f32) (100.0f32/255.0f32),   -- normalized red
   vec3 (100.0f32/255.0f32) (255.0f32/255.0f32) (100.0f32/255.0f32),   -- normalized green
   vec3 (100.0f32/255.0f32) (100.0f32/255.0f32) (255.0f32/255.0f32),   -- normalized blue
   vec3 (255.0f32/255.0f32) (255.0f32/255.0f32) (100.0f32/255.0f32)]   -- normalized yellow

-- Vertex positions for a triangle
def positions: [3]vec4 =
  [vec4 -0.5f32 -0.5f32 0.0f32 1.0f32,
   vec4  0.5f32 -0.5f32 0.0f32 1.0f32,
   vec4  0.0f32  0.5f32 0.0f32 1.0f32]

-- Vertex shader: output position (tests array indexing)
#[vertex]
def vertex_main(#[builtin(vertex_index)] vertex_id: i32): #[builtin(position)] vec4 =
  positions[vertex_id]

-- Fragment shader: tests boolean literals, array indexing, if-then-else
#[fragment]
def fragment_main(): #[location(0)] vec4 =
  let color_index = 1 in
  let selected_color = palette[color_index] in
  let is_green = true in
  let alpha = if is_green then 1.0f32 else 0.5f32 in
  vec4 selected_color.x selected_color.y selected_color.z alpha
